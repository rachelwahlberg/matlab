% edit into object once you want to combine with ephys
% for now just a script

%% load and combine files

animals = {'Luna','Minerva'}; %which animals you'd like to analyze
foldername = '/data/ExperimentsRSW/CircularMaze/Performance/';

f = 1;

for a = 1:length(animals)
    d = dir([foldername animals{a}]);
    for fnum = 1:length(d)
        if d(fnum).name(1) == 'd' %not . or .. 

        filenames{a}{f} = [foldername animals{a} '/' d(fnum).name];
        f = f +1;
        end
    end
    f = 1;
end

% % % check any filename inconsistencies - later
% for f = 1:length(filenames)
%     if filenames{f}(57) == 'm'
%         movefile (filenames{f},[filenames{f}(1:56) 'M' filenames{f}(58:end)])
%       %  filenames{f}(57) = 'M'; %making all uppercase
%     elseif filenames{f}(57) == 'l'
%   movefile (filenames{f},[filenames{f}(1:56) 'L' filenames{f}(58:end)])
%         filenames{f}(57) = 'L';
%     end
% end


% grab watertraining and pretraining filenames

for a = 1:length(animals)
    animalStructures{a} = struct;
    animalStructures{a}.animal = animals{a};

    w = 1; p = 1;
    for f = 1:length(filenames{a})
        s = split(filenames{a}{f},'_');

        if strcmp(s{5},'watertraining') == true
            animalStructures{a}.waterFilenames{w} = filenames{a}{f};
            animalStructures{a}.waterTables{w} = ...
                readtable(filenames{a}{f},'TextType','string',...
                'ReadVariableNames',false,"DurationType","text");
            animalStructures{a}.waterTables{w}.Properties.VariableNames = ...
                {'Date' 'Time' 'Port' 'Performance'};

            % correct times (shift hours funny) - check on dif computers
            % cause internal timestamp might be different
            rawtimes = datetime(animalStructures{a}.waterTables{w}.Time,...
                "format","HH:mm:ss:SSS");
            shift = rawtimes.Hour < 6; %tmp fix. to shift noon to 6pm to correct times, not midnight to 6am
            rawtimes(shift) = rawtimes(shift) + hours(12); %tmp fix pt 2

            animalStructures{a}.waterTables{w}.Time = rawtimes;
            dt = animalStructures{a}.waterTables{w}.Date(1);
            if dt < datetime("2/15/2024")
                ztRef = datetime("12:00:00:000","format","HH:mm:ss:SSS");
            else  % changed dark->light switch from 12pm to 2pm
                ztRef = datetime("14:00:00:000","format","HH:mm:ss:SSS");
            end

            zttimes = rawtimes - ztRef;
            zttimes.Format = 'hh:mm:ss.SSS'; % HH isn't valid
            animalStructures{a}.waterTables{w}.ZTtimes = zttimes;

            relativetimes = minutes(animalStructures{a}.waterTables{w}.ZTtimes - ...
            animalStructures{a}.waterTables{w}.ZTtimes(1));
            animalStructures{a}.waterTables{w}.Relativetimes = relativetimes;

            w = w + 1;

        elseif strcmp(s{5},'pretraining') == true
            animalStructures{a}.preFilenames{p} = filenames{a}{f};
            animalStructures{a}.preTables{p} = ...
                readtable(filenames{a}{f},'TextType','string',...
                'ReadVariableNames',false,"DurationType","text");
            animalStructures{a}.preTables{p}.Properties.VariableNames = ...
                {'Date' 'Time' 'Port' 'Performance'};

            rawtimes = datetime(animalStructures{a}.preTables{p}.Time,...
                "format","HH:mm:ss:SSS");
            shift = rawtimes.Hour < 6; %tmp fix. to shift noon to 6pm to correct times, not midnight to 6am
            rawtimes(shift) = rawtimes(shift) + hours(12); %tmp fix pt 2

            animalStructures{a}.preTables{p}.Time = rawtimes;
            dt = animalStructures{a}.preTables{p}.Date(1);
            if dt < datetime("2/15/2024")
                ztRef = datetime("12:00:00:000","format","HH:mm:ss:SSS");
            else  % changed dark->light switch from 12pm to 2pm
                ztRef = datetime("14:00:00:000","format","HH:mm:ss:SSS");
            end

            zttimes = rawtimes - ztRef;
            zttimes.Format = 'hh:mm:ss.SSS';
            animalStructures{a}.preTables{p}.ZTtimes = zttimes;

            relativetimes = minutes(animalStructures{a}.preTables{p}.ZTtimes - ...
            animalStructures{a}.preTables{p}.ZTtimes(1));
            animalStructures{a}.preTables{p}.Relativetimes = relativetimes;

            p = p + 1;
        end
    end
end

%% do preliminary plots

figure
for a = 1:length(animals)
    for s = 1:length(animalStructures{a}.preTables)
        dt = animalStructures{a}.preTables{s}.Date(1);
        hold all
        plot(animalStructures{a}.preTables{s}.Relativetimes,...
            animalStructures{a}.preTables{s}.Performance)
        scatter(animalStructures{a}.preTables{s}.Relativetimes,...
            animalStructures{a}.preTables{s}.Performance,'filled')
        title([animals{a} ' Session # ' num2str(s) ' ' string(dt) ' s = ' num2str(s)])
        pause
        clf
    end
end

figure
for a = 1:length(animals)
    for s = 1:length(animalStructures{a}.waterTables)
        dt = animalStructures{a}.waterTables{s}.Date(1);
        hold all
        plot(animalStructures{a}.waterTables{s}.Relativetimes,...
            animalStructures{a}.waterTables{s}.Performance)
        scatter(animalStructures{a}.waterTables{s}.Relativetimes,...
            animalStructures{a}.waterTables{s}.Performance,'filled')
        title([animals{a} ' Session # ' num2str(s) ' ' string(dt) ' s = ' num2str(s)])
        pause
        clf
    end
end

%% example beh figure - mni 2024
% preselected examples 
% luna - sessions
% minerva - 

figure
hold all

h1 = tiledlayout(2,3);
h1.TileSpacing = "tight";

position = 1; h = 1; w = 1; ax1 = nexttile(position,[h,w]);
position = 2; h = 1; w = 1; ax2 = nexttile(position,[h,w]);
position = 3; h = 1; w = 1; ax3 = nexttile(position,[h,w]);
position = 4; h = 1; w = 1; ax4 = nexttile(position,[h,w]);
position = 5; h = 1; w = 1; ax5 = nexttile(position,[h,w]);
position = 6; h = 1; w = 1; ax6 = nexttile(position,[h,w]);

axes(ax1)
hold all
plot(animalStructures{1}.preTables{14}.Relativetimes,...
    animalStructures{1}.preTables{14}.Performance,'k')
scatter(animalStructures{1}.preTables{14}.Relativetimes,...
    animalStructures{1}.preTables{14}.Performance,'filled','k')
title(['Session # ' num2str(14)])
ylabel({'Rat L' 'Performance'})
xline(animalStructures{1}.preTables{14}.Relativetimes(changeindex(1,14)),...
    'LineWidth',2,'Color','magenta','LineStyle','--');     
hold off

axes(ax2)
hold all
plot(animalStructures{1}.preTables{17}.Relativetimes,...
    animalStructures{1}.preTables{17}.Performance,'k')
scatter(animalStructures{1}.preTables{17}.Relativetimes,...
    animalStructures{1}.preTables{17}.Performance,'filled','k')
title(['Session # ' num2str(17)])
xline(animalStructures{1}.preTables{17}.Relativetimes(changeindex(1,17)),...
    'LineWidth',2,'Color','magenta','LineStyle','--');  
hold off

axes(ax3)
hold all
plot(animalStructures{1}.preTables{19}.Relativetimes,...
    animalStructures{1}.preTables{19}.Performance,'k')
scatter(animalStructures{1}.preTables{19}.Relativetimes,...
    animalStructures{1}.preTables{19}.Performance,'filled','k')
title(['Session # ' num2str(19)])
xline(animalStructures{1}.preTables{19}.Relativetimes(changeindex(1,19)),...
    'LineWidth',2,'Color','magenta','LineStyle','--');  
hold off

axes(ax4)
hold all
plot(animalStructures{2}.preTables{28}.Relativetimes,...
    animalStructures{2}.preTables{28}.Performance,'k')
scatter(animalStructures{2}.preTables{28}.Relativetimes,...
    animalStructures{2}.preTables{28}.Performance,'filled','k')
title(['Session # ' num2str(28)])
ylabel({'Rat M' 'Performance'})
xlabel('minutes from start')
xline(animalStructures{2}.preTables{28}.Relativetimes(changeindex(2,28)),...
    'LineWidth',2,'Color','magenta','LineStyle','--');  
hold off

axes(ax5)
hold all
plot(animalStructures{2}.preTables{29}.Relativetimes,...
    animalStructures{2}.preTables{29}.Performance,'k')
scatter(animalStructures{2}.preTables{29}.Relativetimes,...
    animalStructures{2}.preTables{29}.Performance,'filled','k')
title(['Session # ' num2str(29)])
%ylabel({'Performance'})
xlabel('minutes from start')
xline(animalStructures{2}.preTables{29}.Relativetimes(changeindex(2,29)),...
    'LineWidth',2,'Color','magenta','LineStyle','--');  
hold off

axes(ax6)
hold all
plot(animalStructures{2}.preTables{36}.Relativetimes,...
    animalStructures{2}.preTables{36}.Performance,'k')
scatter(animalStructures{2}.preTables{36}.Relativetimes,...
    animalStructures{2}.preTables{36}.Performance,'filled','k')
title(['Session # ' num2str(36)])
%ylabel({'Performance'})
xlabel('minutes from start')
xline(animalStructures{2}.preTables{36}.Relativetimes(changeindex(2,36)),...
    'LineWidth',2,'Color','magenta','LineStyle','--');  
hold off

%% 

sessions{1} = [16,17,18,19,21,22,23,24,25,26,27,29,30]; % luna
sessions{2} = [14,17,27,28,29,30,36,43]; %minerva

%%%% to just recheck
figure
for a = 1:length(sessions)
    for s = 1:length(sessions{a})
        fnum = sessions{a}(s);
        relativetimes = minutes(animalStructures{a}.preTables{fnum}.ZTtimes - ...
            animalStructures{a}.preTables{fnum}.ZTtimes(1));

        hold all
        plot(relativetimes,animalStructures{a}.preTables{fnum}.Performance);
        scatter(relativetimes,animalStructures{a}.preTables{fnum}.Performance,'filled');
        
        
        xline(relativetimes(changeindex(a,s)),'LineWidth',2,'Color','magenta','LineStyle','--');
     
        xlabel('time relative to start (min)')
        ylabel('performance')
        title(['Animal ' num2str(a) ' Session # ' num2str(fnum)])
        pause
        clf
    end
end

%
% figure
% for s = 1:length(sessions{2})
%     fnum = minerva_sessions(s);
%     relativetimes = minutes(animalStructures{2}.preTables{fnum}.ZTtimes - ...
%         animalStructures{2}.preTables{fnum}.ZTtimes(1));
% 
%     hold all
%     plot(relativetimes,animalStructures{2}.preTables{fnum}.Performance);
%     scatter(relativetimes,animalStructures{2}.preTables{fnum}.Performance,'filled');
% 
%     title('all Minerva sessions')
%     xlabel('time relative to start (min)')
%     ylabel('performance')
%     % title(['Session # ' num2str(fnum)])
%     % pause
%     %clf
% end

%% find low point to determine when ports switched (though change this to be a manual timestamp)
switchtime = nan(43,2);
endtime = nan(43,2);

for a = 1:length(sessions)
    for s = 1:length(sessions{a})
    fnum = sessions{a}(s);
  %      for fnum = 1:length(animalStructures{a}.preTables)
        perf = animalStructures{a}.preTables{fnum}.Performance;
        relativetimes = animalStructures{a}.preTables{fnum}.Relativetimes;

        d = diff(perf);
        [~,i] = min(d);
        
        changeindex = i+1; % for the next idx
        switchtime(fnum,a) = relativetimes(changeindex);
        endtime(fnum,a) = relativetimes(end);


    end
end

port2 = endtime-switchtime;

luna = [switchtime(:,1) port2(:,1)];
minerva = [switchtime(:,2) port2(:,2)];



h1 = tiledlayout(1,2);
h1.TileSpacing = "compact";

position = 1; h = 1; w = 1; ax1 = nexttile(position,[h,w]);
position = 2; h = 1; w = 1; ax2 = nexttile(position,[h,w]);

axes(ax1)
hold on
title('Rat L')
v1 = violin(luna,'facecolor',[0.3010 0.7450 0.9330;0.4940 0.1840 0.5560],'facealpha',1);
scatter(ones(length(luna),1),luna(:,1),'k','filled')
scatter(ones(length(luna),1)*2,luna(:,2),'k','filled')
line([ones(length(luna),1) ones(length(luna),1)*2]',[luna(:,1) luna(:,2)]')
legend({~ 'Mean' 'Median' }) %imperfect fix
ylabel('Time to twenty trials (min)')
ax1.XTickLabel = [];
xlabel('port 1            port 2')

axes(ax2)
hold on
title('Rat M')
v1 = violin(minerva,'facecolor',[0.3010 0.7450 0.9330;0.4940 0.1840 0.5560],'facealpha',1);
scatter(ones(length(minerva),1),minerva(:,1),'k','filled')
scatter(ones(length(minerva),1)*2,minerva(:,2),'k','filled')
line([ones(length(minerva),1) ones(length(minerva),1)*2]',[minerva(:,1) minerva(:,2)]')
legend({' ' 'Mean' 'Median' }) %imperfect fix
%ylabel('Time to twenty trials (min)')
ax2.XTickLabel = [];
xlabel('port 1            port 2')


%% inside outside performance

b_insideports = [13 14 15 16];
b_outsideports = [5 6 7 8];
w_insideports = [9 10 11 12];
w_outsideports = [1 2 3 4];

percentblack = nan(43,2);
percentwhite = nan(43,2);

for a = 1:length(sessions)
    for s = 1:length(sessions{a})
    fnum = sessions{a}(s);
  %      for fnum = 1:length(animalStructures{a}.preTables)
        ports = animalStructures{a}.preTables{fnum}.Port;
       
        percentblack(fnum,a) = ismember(ports,b_insideports)/sum(ismember(ports,[b_insideports b_outsideports]));
 percentwhite(fnum,a) = sum(ismember(ports,w_outsideports))/sum(ismember(ports,[w_insideports w_outsideports]));

    end
end
















